<?xml version="1.0" encoding="utf-8"?>
<edmx:Edmx xmlns:edmx="http://docs.oasis-open.org/odata/ns/edmx" Version="4.0">
  <edmx:Reference Uri="https://oasis-tcs.github.io/odata-vocabularies/vocabularies/Org.OData.Core.V1.xml">
    <edmx:Include Alias="Core" Namespace="Org.OData.Core.V1" />
  </edmx:Reference>
  <edmx:Reference Uri="https://oasis-tcs.github.io/odata-vocabularies/vocabularies/Org.OData.Aggregation.V1.xml">
    <edmx:Include Alias="Aggregation" Namespace="Org.OData.Aggregation.V1" />
  </edmx:Reference>
  <edmx:Reference Uri="https://sap.github.io/odata-vocabularies/vocabularies/Common.xml">
    <edmx:Include Namespace="com.sap.vocabularies.Common.v1" Alias="Common" />
  </edmx:Reference>

  <edmx:DataServices>
    <Schema xmlns="http://docs.oasis-open.org/odata/ns/edm" Namespace="com.sap.vocabularies.Hierarchy.v1" Alias="Hierarchy">
      <Annotation Term="Core.Description">
        <String>Terms for Hierarchies</String>
      </Annotation>
      <Annotation Term="Core.Description" Qualifier="Published">
        <String>2018-01-31 © Copyright 2018 SAP SE. All rights reserved</String>
      </Annotation>
      <Annotation Term="Core.Links">
        <Collection>
          <Record>
            <PropertyValue Property="rel" String="latest-version" />
            <PropertyValue Property="href" String="https://sap.github.io/odata-vocabularies/vocabularies/Hierarchy.xml" />
          </Record>
          <Record>
            <PropertyValue Property="rel" String="alternate" />
            <PropertyValue Property="href" String="https://sap.github.io/odata-vocabularies/vocabularies/Hierarchy.json" />
          </Record>
          <Record>
            <PropertyValue Property="rel" String="describedby" />
            <PropertyValue Property="href" String="https://github.com/sap/odata-vocabularies/blob/main/vocabularies/Hierarchy.md" />
          </Record>
        </Collection>
      </Annotation>

      <Term Name="RecursiveHierarchy" Type="Hierarchy.RecursiveHierarchyType" BaseTerm="Aggregation.RecursiveHierarchy" Nullable="false" AppliesTo="EntityType">
        <Annotation Term="Common.Experimental" />
        <Annotation Term="Core.Description" String="Defines a recursive hierarchy" />
        <Annotation Term="Core.LongDescription">
          <String>The [base term](https://oasis-tcs.github.io/odata-vocabularies/vocabularies/Org.OData.Aggregation.V1.html#RecursiveHierarchy)
          governs what are the nodes and parents in the hierarchy, whereas this annotation designates properties that contain derived information.</String>
        </Annotation>
      </Term>
      <ComplexType Name="RecursiveHierarchyType">
        <Annotation Term="Common.Experimental" />
        <Annotation Term="Core.LongDescription">
          <String>The nullable property paths in this complex type refer to properties of an entity type that contain
information about a node in a recursive hierarchy. When hierarchical transformations
are applied whose first parameter has the annotated entity type
and whose second parameter is the annotation qualifier,
then these properties are derived for each node in the result set.

For requests like
```
SalesOrganizations?$apply=
descendants(..., filter(ID eq 'US'), keep start)
/ancestors(..., filter(contains(Name, 'New York'))
/Hierarchy.TopLevels(..., Levels=2)
/top(10)
```
the following collections are distinguished:
|Collection|Definition|Value|Where in request|
|----------|----------|-----|----------------|
|sub-hierarchy|output set of a `descendants` transformation filtering a single node value|US sales organizations|rows 1–2|
|matching nodes|see [`MatchCount`](#MatchCount)|US sales organizations with "New York" in their name|output set of `filter` transformation in row 3|
|unlimited hierarchy|output set of the last `ancestors`, `descendants` or `traverse` transformation disregarding numeric fifth parameters|US sales organizations with leaves containing "New York"|rows 1–3|
|limited hierarchy|output set of the last `ancestors`, `descendants`, `traverse` or [`Hierarchy.TopLevels`](#TopLevels) transformation|2 levels of US sales organizations with leaves containing "New York"|rows 1–4|
</String>
        </Annotation>
        <Property Name="ExternalKeyProperty" Type="Edm.PropertyPath" Nullable="false">
          <Annotation Term="Core.Description" String="Property holding the external key value for a node" />
        </Property>
        <Property Name="NodeTypeProperty" Type="Edm.PropertyPath" Nullable="true">
          <Annotation Term="Core.Description" String="Property holding the type of a node" />
          <Annotation Term="Core.LongDescription">
            <String>In a recursive hierarchy with mixed types, nodes of different type can have different properties
            and be represented by entities of different subtypes of a commmon entity type.
            The common entity type is the target of the `RecursiveHierarchy` annotation.</String>
          </Annotation>
        </Property>
        <Property Name="ChildCountProperty" Type="Edm.PropertyPath" Nullable="true">
          <Annotation Term="Core.Description" String="Integer property of type `Edm.Int64` holding the number of children a node has in the unlimited hierarchy" />
        </Property>
        <Property Name="DescendantCountProperty" Type="Edm.PropertyPath" Nullable="true">
          <Annotation Term="Core.Description" String="Integer property of type `Edm.Int64` holding the number of descendants a node has in the unlimited hierarchy" />
        </Property>
        <Property Name="LimitedDescendantCountProperty" Type="Edm.PropertyPath" Nullable="true">
          <Annotation Term="Core.Description" String="Integer property of type `Edm.Int64` holding the number of descendants a node has in the limited hierarchy" />
        </Property>
        <Property Name="DrillStateProperty" Type="Edm.PropertyPath" Nullable="true">
          <Annotation Term="Core.Description" String="String property holding the drill state of a node" />
          <Annotation Term="Core.LongDescription">
            <String>Possible drill states are:
            &lt;br&gt;- `expanded` if a node has children in the limited hierarchy
            &lt;br&gt;- `collapsed` if a node has children in the unlimited hierarchy but not in the limited hierarchy
            &lt;br&gt;- `leaf` if a node has no children in the unlimited hierarchy</String>
          </Annotation>
        </Property>
        <Property Name="DistanceFromRootProperty" Type="Edm.PropertyPath" Nullable="true">
          <Annotation Term="Core.Description" String="Integer property of type `Edm.Int64` holding the number of ancestors a node has in the (sub-)hierarchy" />
        </Property>
        <Property Name="SiblingRankProperty" Type="Edm.PropertyPath" Nullable="true">
          <Annotation Term="Core.Description" String="Integer property of type `Edm.Int64` holding the sibling rank of a node" />
          <Annotation Term="Core.LongDescription">
            <String>The sibling rank of a node is the index of the node in the sequence of all nodes
            in the unlimited hierarchy with the same parent. The first sibling has rank 0.
            Updating this property means changing the relative sibling order that is used in the absence of an `orderby` transformation.</String>
          </Annotation>
        </Property>
        <Property Name="MatchedProperty" Type="Edm.PropertyPath" Nullable="true">
          <Annotation Term="Core.Description" String="Boolean property indicating [matching](#MatchCount) nodes" />
        </Property>
        <Property Name="MatchedDescendantCountProperty" Type="Edm.PropertyPath" Nullable="true">
          <Annotation Term="Core.Description" String="Integer property of type `Edm.Int64` holding the the number of [matching](#MatchCount) descendants a node has in the unlimited hierarchy" />
        </Property>
        <!--
        <Property Name="StartNodeCountsSupported" Type="Core.Tag" Nullable="false" DefaultValue="false">
          <Annotation Term="Core.Description" String="Whether the service provides the [`StartNodeCounts`](#StartNodeCounts) instance annotation" />
        </Property>
        -->
      </ComplexType>

      <Term Name="MatchCount" Type="Edm.Int64" AppliesTo="Collection">
        <Annotation Term="Common.Experimental" />
        <Annotation Term="Common.IsInstanceAnnotation" />
        <Annotation Term="Core.Description" String="Instance annotation on the result of an `$apply` query option containing the number of matching nodes after hierarchical transformations" />
        <Annotation Term="Core.LongDescription">
          <String>The service designates a subset of the `$apply` result as "matching nodes" derived from the start nodes
          of `ancestors` and `descendants` as determined by the transformations in their fourth parameters.
          This subset is typically the output set of a `filter` or `search` transformation that evaluates node
          attributes other than the node value.&lt;br&gt;This instance annotation is available if [`RecursiveHierarchy/MatchedProperty`](#RecursiveHierarchyType)
          and `RecursiveHierarchy/MatchedDescendantCountProperty` are also available.</String>
        </Annotation>
      </Term>

      <!--
      <Term Name="StartNodeCounts" Type="Collection(Edm.Int64)" AppliesTo="Collection">
        <Annotation Term="Common.Experimental" />
        <Annotation Term="Common.IsInstanceAnnotation" />
        <Annotation Term="Core.Description" String="Instance annotation on the result of an `$apply` query option containing the number of start nodes for each `ancestors` or `descendants` transformation" />
        <Annotation Term="Core.LongDescription">
          <String>The annotation value is an integer collection whose n-th entry is the number of start nodes determined
          for the n-th `ancestors` or `descendants` transformation in the order in which they occur in the `$apply` query option.
          Start nodes are determined by the fourth parameter of an `ancestors` or `descendants` transformation.</String>
        </Annotation>
      </Term>
      -->

      <Function Name="TopLevels" IsBound="true" EntitySetPath="InputSet">
        <Annotation Term="Common.Experimental" />
        <Annotation Term="Core.Description" String="Returns the first n levels of a hierarchical collection in preorder" />
        <Annotation Term="Core.LongDescription">
          <String>This function can be used as a transformation after hierarchical transformations that use a recursive hierarchy
          defined by an [`Aggregation.RecursiveHierarchy`](https://oasis-tcs.github.io/odata-vocabularies/vocabularies/Org.OData.Aggregation.V1.html#RecursiveHierarchy)
          annotation on the entity type of the `HierarchyNodes`. If m is the minimal distance from root in the hierarchical collection
          given in the binding parameter, the output contains the nodes with m &le; distance from root &lt; m+n.
          The output is sorted in preorder, preserving the relative order of siblings.</String>
        </Annotation>
        <Parameter Name="InputSet" Type="Collection(Edm.EntityType)" Nullable="false"/>
        <Parameter Name="HierarchyNodes" Type="Collection(Edm.EntityType)" Nullable="false" />
        <Parameter Name="HierarchyQualifier" Type="Aggregation.HierarchyQualifier" Nullable="false" />
        <Parameter Name="NodeProperty" Type="Edm.String" Nullable="false">
          <Annotation Term="Core.Description" String="Property path to the node value, evaluated relative to the binding parameter" />
        </Parameter>
        <Parameter Name="Levels" Type="Edm.Int64" Nullable="false">
          <Annotation Term="Core.Description" String="The number n of levels to be output" />
        </Parameter>
        <ReturnType Type="Collection(Edm.EntityType)" />
      </Function>

    </Schema>
  </edmx:DataServices>
</edmx:Edmx>
